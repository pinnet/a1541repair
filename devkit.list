0000-                  4
0000-                  5
0000-                  6
0000-                  7       ;-----------------------------------------------------------------------------------------------------------------------------
0000-                  8       ;
0000-                  9       ;  The WOZ Monitor for the Apple 1
0000-                 10       ;  Written by Steve Wozniak 1976
0000-                 11       ;  Adapted for VIA DEVKIT BY Danny Arnold (c) 2021
0000-                 12       ;-------------------------------------------------------------------------
0000-                 13
0000-                 14
0000-                 15       ;-------------------------------------------------------------------------
0000-                 16       ;  Memory declaration
0000-                 17       ;-------------------------------------------------------------------------
0000-                 18
0024-                 19       XAML            .EQ     $24             Last "opened" location Low
0025-                 20       XAMH            .EQ     $25             Last "opened" location High
0026-                 21       STL             .EQ     $26             Store address Low
0027-                 22       STH             .EQ     $27             Store address High
0028-                 23       L               .EQ     $28             Hex value parsing Low
0029-                 24       H               .EQ     $29             Hex value parsing High
002A-                 25       YSAV            .EQ     $2A             Used to see if hex value is given
002B-                 26       MODE            .EQ     $2B             $00=XAM, $7F=STOR, $AE=BLOCK XAM
00C1-                 27       TMP0            .EQ     $C1
002C-                 28       STRL            .EQ     $2C
002D-                 29       STRH            .EQ     $2D
002E-                 30       MEMSZL          .EQ     $2E
002F-                 31       MEMSZH          .EQ     $2F
0010-                 32       BCD             .EQ     $10
0016-                 33       NUMSTR          .EQ     $16
0000-                 34
0200-                 35       IN              .EQ     $0200,$027F     Input buffer
0000-                 36
D010-                 37       KBD             .EQ     $D010           PIA.A keyboard input
D011-                 38       KBDCR           .EQ     $D011           PIA.A keyboard control register
D012-                 39       DSP             .EQ     $D012           PIA.B display output register
D013-                 40       DSPCR           .EQ     $D013           PIA.B display control register
0000-                 41
8001-                 42       VIAORA          .EQ     $8001           VIA Output Register A
8001-                 43       VIAIRA          .EQ     $8001           VIA Input Register A
8003-                 44       VIADDRA         .EQ     $8003           VIA Data Direction Register A
0000-                 45
8000-                 46       VIAORB          .EQ     $8000           VIA Output Register B
8000-                 47       VIAIRB          .EQ     $8000           VIA Input Register B
8002-                 48       VIADDRB         .EQ     $8002           VIA Data Direction Register B
0000-                 49
800A-                 50       VIASR           .EQ     $800A           VIA Shift Register
800B-                 51       VIAACR          .EQ     $800B           VIA Aux Control Register
800C-                 52       VIAPCR          .EQ     $800C           VIA Peripheral Control Register
800D-                 53       VIAIFR          .EQ     $800D           VIA Interrupt Flag Register
800E-                 54       VIAIER          .EQ     $800E           VIA Interrupt Enable Register
0000-                 55
0000-                 56       ; KBD b7..b0 are inputs, b6..b0 is ASCII input, b7 is constant high
0000-                 57       ;     Programmed to respond to low to high KBD strobe
0000-                 58       ; DSP b6..b0 are outputs, b7 is input
0000-                 59       ;     CB2 goes low when data is written, returns high when CB1 goes high
0000-                 60       ; Interrupts are enabled, though not used. KBD can be jumpered to IRQ,
0000-                 61       ; whereas DSP can be jumpered to NMI.
0000-                 62
0000-                 63       ;-------------------------------------------------------------------------
0000-                 64       ;  Constants
0000-                 65       ;-------------------------------------------------------------------------
0000-                 66
00DF-                 67       BS              .EQ     $DF             Backspace key, arrow left key
008D-                 68       CR              .EQ     $8D             Carriage Return
009B-                 69       ESC             .EQ     $9B             ESC key
003E-                 70       PROMPT          .EQ     '>'             Prompt character
0000-                 71
0000-                 72       ;-------------------------------------------------------------------------
0000-                 73       ;  Begin DevKit ROM
0000-                 74       ;-------------------------------------------------------------------------
E000-                 75                       .OR     $E000
E000-                 76                       .TA     $0000
E000-                 77
E000-                 78       START
E000-A9 00            79 (  2)                 LDA     #0
E002-4C 03 FD         80 (  3)                 JMP     RESET
E005-                 81
E005-                 82
E005-                 83
E005-                 84       ;-------------------------------------------------------------------------
E005-                 85       ;  Let's get started
E005-                 86       ;
E005-                 87       ;  Remark the RESET routine is only to be entered by asserting the RESET
E005-                 88       ;  line of the system. This ensures that the data direction registers
E005-                 89       ;  are selected.
E005-                 90       ;-------------------------------------------------------------------------
FD00                 91                       .NO     $FD00
FD00-                 92                       .TA     $1D00
FD00-                 93       ;-------------------------------------------------------------------------
FD00-                 94       ;       Vector Table
FD00-                 95       ;-------------------------------------------------------------------------
FD00-                 96
FD00-                 97       VEC_START
FD00-4C 00 E0         98 (  3)                 JMP     START
FD03-                 99
FD03-                100       ;------------------------------------------------------------------------
FD03-D8              101 (  2) RESET           CLD                     Clear decimal arithmetic mode
FD04-58              102 (  2)                 CLI
FD05-A0 7F           103 (  2)                 LDY     #%0111.1111     Mask for DSP data direction reg
FD07-8C 12 D0        104 (  4)                 STY     DSP              (DDR mode is assumed after reset)
FD0A-A9 A7           105 (  2)                 LDA     #%1010.0111     KBD and DSP control register mask
FD0C-8D 11 D0        106 (  4)                 STA     KBDCR           Enable interrupts, set CA1, CB1 for
FD0F-8D 13 D0        107 (  4)                 STA     DSPCR            positive edge sense/output mode.
FD12-                108
FD12-                109       ; Program falls through to the GETLINE routine to save some program bytes
FD12-                110       ; Please note that Y still holds $7F, which will cause an automatic Escape
FD12-                111
FD12-A9 33           112 (  2)                 LDA     #BOOTMSG&$FF
FD14-85 2C           113 (  2)                 STA     STRL
FD16-A9 FF           114 (  2)                 LDA     #BOOTMSG>>8
FD18-85 2D           115 (  2)                 STA     STRH
FD1A-20 89 FE        116 (  6)                 JSR     STRECHO
FD1D-A9 00           117 (  2)                 LDA     #0
FD1F-                118       ;-------------------------------------------------------------------------
FD1F-                119       ; The GETLINE process
FD1F-                120       ;-------------------------------------------------------------------------
FD1F-                121
FD1F-C9 DF           122 (  2) NOTCR           CMP     #BS             Backspace key?
FD21-F0 13           123 (2**)                 BEQ     BACKSPACE       Yes
FD23-C9 9B           124 (  2)                 CMP     #ESC            ESC?
FD25-F0 03           125 (2**)                 BEQ     ESCAPE          Yes
FD27-C8              126 (  2)                 INY                     Advance text index
FD28-10 0F           127 (2**)                 BPL     NEXTCHAR        Auto ESC if line longer than 127
FD2A-                128
FD2A-A9 3E           129 (  2) ESCAPE          LDA     #PROMPT         Print prompt character
FD2C-20 33 FE        130 (  6)                 JSR     ECHO            Output it.
FD2F-                131
FD2F-A9 8D           132 (  2) GETLINE         LDA     #CR             Send CR
FD31-20 33 FE        133 (  6)                 JSR     ECHO
FD34-                134
FD34-A0 01           135 (  2)                 LDY     #0+1            Start a new input line
FD36-88              136 (  2) BACKSPACE       DEY                     Backup text index
FD37-30 F6           137 (2**)                 BMI     GETLINE         Oops, line's empty, reinitialize
FD39-                138
FD39-AD 11 D0        139 (  4) NEXTCHAR        LDA     KBDCR           Wait for key press
FD3C-10 FB           140 (2**)                 BPL     NEXTCHAR        No key yet!
FD3E-AD 10 D0        141 (  4)                 LDA     KBD             Load character. B7 should be '1'
FD41-99 00 02        142 (  5)                 STA     IN,Y            Add to text buffer
FD44-20 33 FE        143 (  6)                 JSR     ECHO            Display character
FD47-C9 8D           144 (  2)                 CMP     #CR
FD49-D0 D4           145 (2**)                 BNE     NOTCR           It's not CR!
FD4B-                146
FD4B-                147       ; Line received, now let's parse it
FD4B-                148
FD4B-A0 FF           149 (  2)                 LDY     #-1             Reset text index
FD4D-A9 00           150 (  2)                 LDA     #0              Default mode is XAM
FD4F-AA              151 (  2)                 TAX                     X=0
FD50-                152
FD50-0A              153 (  2) SETSTOR         ASL                     Leaves $7B if setting STOR mode
FD51-                154
FD51-85 2B           155 (  2) SETMODE         STA     MODE            Set mode flags
FD53-                156
FD53-C8              157 (  2) BLSKIP          INY                     Advance text index
FD54-                158
FD54-B9 00 02        159 ( 4*) NEXTITEM        LDA     IN,Y            Get character
FD57-C9 8D           160 (  2)                 CMP     #CR
FD59-F0 D4           161 (2**)                 BEQ     GETLINE         We're done if it's CR!
FD5B-C9 AE           162 (  2)                 CMP     #"."
FD5D-90 F4           163 (2**)                 BCC     BLSKIP          Ignore everything below "."!
FD5F-F0 F0           164 (2**)                 BEQ     SETMODE         Set BLOCK XAM mode ("." = $AE)
FD61-C9 BA           165 (  2)                 CMP     #":"
FD63-F0 EB           166 (2**)                 BEQ     SETSTOR         Set STOR mode! $BA will become $7B
FD65-C9 C9           167 (  2)                 CMP     #"I"
FD67-F0 43           168 (2**)                 BEQ     CLRRAM
FD69-C9 D4           169 (  2)                 CMP     #"T"
FD6B-F0 93           170 (2**)                 BEQ     VEC_START
FD6D-C9 D2           171 (  2)                 CMP     #"R"
FD6F-F0 67           172 (2**)                 BEQ     RUN             Run the program! Forget the rest
FD71-86 28           173 (  3)                 STX     L               Clear input value (X=0)
FD73-86 29           174 (  3)                 STX     H
FD75-84 2A           175 (  3)                 STY     YSAV            Save Y for comparison
FD77-                176
FD77-                177       ; Here we're trying to parse a new hex value
FD77-                178
FD77-B9 00 02        179 ( 4*) NEXTHEX         LDA     IN,Y            Get character for hex test
FD7A-49 B0           180 (  2)                 EOR     #$B0            Map digits to 0-9
FD7C-C9 0A           181 (  2)                 CMP     #9+1            Is it a decimal digit?
FD7E-90 06           182 (2**)                 BCC     DIG             Yes!
FD80-69 88           183 (  2)                 ADC     #$88            Map letter "A"-"F" to $FA-FF
FD82-C9 FA           184 (  2)                 CMP     #$FA            Hex letter?
FD84-90 11           185 (2**)                 BCC     NOTHEX          No! Character not hex
FD86-                186
FD86-0A              187 (  2) DIG             ASL
FD87-0A              188 (  2)                 ASL                     Hex digit to MSD of A
FD88-0A              189 (  2)                 ASL
FD89-0A              190 (  2)                 ASL
FD8A-                191
FD8A-A2 04           192 (  2)                 LDX     #4              Shift count
FD8C-0A              193 (  2) HEXSHIFT        ASL                     Hex digit left, MSB to carry
FD8D-26 28           194 (  5)                 ROL     L               Rotate into LSD
FD8F-26 29           195 (  5)                 ROL     H               Rotate into MSD's
FD91-CA              196 (  2)                 DEX                     Done 4 shifts?
FD92-D0 F8           197 (2**)                 BNE     HEXSHIFT        No, loop
FD94-C8              198 (  2)                 INY                     Advance text index
FD95-D0 E0           199 (2**)                 BNE     NEXTHEX         Always taken
FD97-                200
FD97-C4 2A           201 (  3) NOTHEX          CPY     YSAV            Was at least 1 hex digit given?
FD99-F0 8F           202 (2**)                 BEQ     ESCAPE          No! Ignore all, start from scratch
FD9B-                203
FD9B-24 2B           204 (  3)                 BIT     MODE            Test MODE byte
FD9D-50 3C           205 (2**)                 BVC     NOTSTOR         B6=0 is STOR, 1 is XAM or BLOCK XAM
FD9F-                206
FD9F-                207       ; STOR mode, save LSD of new hex byte
FD9F-                208
FD9F-A5 28           209 (  3)                 LDA     L               LSD's of hex data
FDA1-81 26           210 (  6)                 STA     (STL,X)         Store current 'store index'(X=0)
FDA3-E6 26           211 (  5)                 INC     STL             Increment store index.
FDA5-D0 AD           212 (2**)                 BNE     NEXTITEM        No carry!
FDA7-E6 27           213 (  5)                 INC     STH             Add carry to 'store index' high
FDA9-4C 54 FD        214 (  3) TONEXTITEM      JMP     NEXTITEM        Get next command item.
FDAC-                215       ;--------------------------------------------------------------------------
FDAC-                216       ;       Clear Memory
FDAC-                217       ;--------------------------------------------------------------------------
FDAC-                218
FDAC-A9 83           219 (  2) CLRRAM          LDA     #RTASMSG&$FF
FDAE-85 2C           220 (  2)                 STA     STRL
FDB0-A9 FF           221 (  2)                 LDA     #RTASMSG>>8
FDB2-85 2D           222 (  2)                 STA     STRH
FDB4-20 89 FE        223 (  6)                 JSR     STRECHO
FDB7-20 3C FE        224 (  6)                 JSR     RAMTAS
FDBA-20 9A FE        225 (  6)                 JSR     BINBCD16
FDBD-A9 16           226 (  2)                 LDA     #NUMSTR&$FF
FDBF-85 2C           227 (  2)                 STA     STRL
FDC1-A9 00           228 (  2)                 LDA     #NUMSTR>>8
FDC3-85 2D           229 (  2)                 STA     STRH
FDC5-20 89 FE        230 (  6)                 JSR     STRECHO
FDC8-A9 75           231 (  2)                 LDA     #MEMMSG&$FF
FDCA-85 2C           232 (  2)                 STA     STRL
FDCC-A9 FF           233 (  2)                 LDA     #MEMMSG>>8
FDCE-85 2D           234 (  2)                 STA     STRH
FDD0-20 89 FE        235 (  6)                 JSR     STRECHO
FDD3-A0 7F           236 (  2)                 LDY     #$7F
FDD5-4C 1F FD        237 (  3)                 JMP     NOTCR
FDD8-                238
FDD8-                239       ;-------------------------------------------------------------------------
FDD8-                240       ;  RUN user's program from last opened location
FDD8-                241       ;-------------------------------------------------------------------------
FDD8-6C 24 00        242 (  5) RUN             JMP     (XAML)          Run user's program
FDDB-                243       ;-------------------------------------------------------------------------
FDDB-                244       ;  We're not in Store mode
FDDB-                245       ;-------------------------------------------------------------------------
FDDB-                246
FDDB-30 2B           247 (2**) NOTSTOR         BMI     XAMNEXT         B7 = 0 for XAM, 1 for BLOCK XAM
FDDD-                248
FDDD-                249       ; We're in XAM mode now
FDDD-                250
FDDD-A2 02           251 (  2)                 LDX     #2              Copy 2 bytes
FDDF-B5 27           252 (  4) SETADR          LDA     L-1,X           Copy hex data to
FDE1-95 25           253 (  4)                 STA     STL-1,X          'store index'
FDE3-95 23           254 (  4)                 STA     XAML-1,X         and to 'XAM index'
FDE5-CA              255 (  2)                 DEX                     Next of 2 bytes
FDE6-D0 F7           256 (2**)                 BNE     SETADR          Loop unless X = 0
FDE8-                257
FDE8-                258       ; Print address and data from this address, fall through next BNE.
FDE8-                259
FDE8-D0 14           260 (2**) NXTPRNT         BNE     PRDATA          NE means no address to print
FDEA-A9 8D           261 (  2)                 LDA     #CR             Print CR first
FDEC-20 33 FE        262 (  6)                 JSR     ECHO
FDEF-A5 25           263 (  3)                 LDA     XAMH            Output high-order byte of address
FDF1-20 20 FE        264 (  6)                 JSR     PRBYTE
FDF4-A5 24           265 (  3)                 LDA     XAML            Output low-order byte of address
FDF6-20 20 FE        266 (  6)                 JSR     PRBYTE
FDF9-A9 BA           267 (  2)                 LDA     #":"            Print colon
FDFB-20 33 FE        268 (  6)                 JSR     ECHO
FDFE-                269
FDFE-A9 A0           270 (  2) PRDATA          LDA     #" "            Print space
FE00-20 33 FE        271 (  6)                 JSR     ECHO
FE03-A1 24           272 (  6)                 LDA     (XAML,X)        Get data from address (X=0)
FE05-20 20 FE        273 (  6)                 JSR     PRBYTE          Output it in hex format
FE08-86 2B           274 (  3) XAMNEXT         STX     MODE            0 -> MODE (XAM mode).
FE0A-A5 24           275 (  3)                 LDA     XAML            See if there's more to print
FE0C-C5 28           276 (  3)                 CMP     L
FE0E-A5 25           277 (  3)                 LDA     XAMH
FE10-E5 29           278 (  3)                 SBC     H
FE12-B0 95           279 (2**)                 BCS     TONEXTITEM      Not less! No more data to output
FE14-                280
FE14-E6 24           281 (  5)                 INC     XAML            Increment 'examine index'
FE16-D0 02           282 (2**)                 BNE     MOD8CHK         No carry!
FE18-E6 25           283 (  5)                 INC     XAMH
FE1A-                284
FE1A-A5 24           285 (  3) MOD8CHK         LDA     XAML            If address MOD 8 = 0 start new line
FE1C-29 07           286 (  2)                 AND     #%0000.0111
FE1E-10 C8           287 (2**)                 BPL     NXTPRNT         Always taken.
FE20-                288
FE20-                289       ;-------------------------------------------------------------------------
FE20-                290       ;  Subroutine to print a byte in A in hex form (destructive)
FE20-                291       ;-------------------------------------------------------------------------
FE20-                292
FE20-48              293 (  3) PRBYTE          PHA                     Save A for LSD
FE21-4A              294 (  2)                 LSR
FE22-4A              295 (  2)                 LSR
FE23-4A              296 (  2)                 LSR                     MSD to LSD position
FE24-4A              297 (  2)                 LSR
FE25-20 29 FE        298 (  6)                 JSR     PRHEX           Output hex digit
FE28-68              299 (  4)                 PLA                     Restore A
FE29-                300
FE29-                301       ; Fall through to print hex routine
FE29-                302
FE29-                303       ;-------------------------------------------------------------------------
FE29-                304       ;  Subroutine to print a hexadecimal digit
FE29-                305       ;-------------------------------------------------------------------------
FE29-                306
FE29-29 0F           307 (  2) PRHEX           AND     #%0000.1111     Mask LSD for hex print
FE2B-09 B0           308 (  2)                 ORA     #"0"            Add "0"
FE2D-C9 BA           309 (  2)                 CMP     #"9"+1          Is it a decimal digit?
FE2F-90 02           310 (2**)                 BCC     ECHO            Yes! output it
FE31-69 06           311 (  2)                 ADC     #6              Add offset for letter A-F
FE33-                312
FE33-                313       ; Fall through to print routine
FE33-                314
FE33-                315       ;-------------------------------------------------------------------------
FE33-                316       ;  Subroutine to print a character to the terminal
FE33-                317       ;-------------------------------------------------------------------------
FE33-                318
FE33-2C 12 D0        319 (  4) ECHO            BIT     DSP             DA bit (B7) cleared yet?
FE36-30 FB           320 (2**)                 BMI     ECHO            No! Wait for display ready
FE38-8D 12 D0        321 (  4)                 STA     DSP             Output character. Sets DA
FE3B-60              322 (  6)                 RTS
FE3C-                323
FE3C-98              324 (  2) RAMTAS          TYA
FE3D-48              325 (  3)                 PHA
FE3E-A9 00           326 (  2)                 LDA     #0
FE40-98              327 (  2)                 TYA
FE41-99 02 00        328 (  5) RAMTZ0          STA     $0002,Y
FE44-99 00 02        329 (  5)                 STA     $0200,Y
FE47-99 00 03        330 (  5)                 STA     $0300,Y
FE4A-C8              331 (  2)                 INY
FE4B-D0 F4           332 (2**)                 BNE     RAMTZ0
FE4D-98              333 (  2) RAMTBT          TYA
FE4E-A9 03           334 (  2)                 LDA     #3
FE50-85 C2           335 (  2)                 STA     TMP0+1
FE52-A9 2E           336 (  2) RAMTZ1          LDA     #'.'
FE54-20 33 FE        337 (  6)                 JSR     ECHO
FE57-E6 C2           338 (  5)                 INC     TMP0+1
FE59-B1 C1           339 ( 5*) RAMTZ2          LDA     (TMP0),Y
FE5B-AA              340 (  2)                 TAX
FE5C-A9 55           341 (  2)                 LDA     #$55
FE5E-91 C1           342 (  6)                 STA     (TMP0),Y
FE60-D1 C1           343 ( 5*)                 CMP     (TMP0),Y
FE62-D0 0F           344 (2**)                 BNE     SIZE
FE64-2A              345 (  2)                 ROL     A
FE65-91 C1           346 (  6)                 STA     (TMP0),Y
FE67-D1 C1           347 ( 5*)                 CMP     (TMP0),Y
FE69-D0 08           348 (2**)                 BNE     SIZE
FE6B-AA              349 (  2)                 TAX
FE6C-91 C1           350 (  6)                 STA     (TMP0),Y
FE6E-C8              351 (  2)                 INY
FE6F-D0 E8           352 (2**)                 BNE     RAMTZ2
FE71-F0 DF           353 (2**)                 BEQ     RAMTZ1
FE73-98              354 (  2) SIZE            TYA
FE74-AA              355 (  2)                 TAX
FE75-A4 C2           356 (  3)                 LDY     TMP0+1
FE77-18              357 (  2)                 CLC
FE78-86 2E           358 (  3)                 STX     MEMSZL
FE7A-84 2F           359 (  3)                 STY     MEMSZH
FE7C-A9 0A           360 (  2)                 LDA     #$0A
FE7E-20 33 FE        361 (  6)                 JSR     ECHO
FE81-A9 0D           362 (  2)                 LDA     #$0D
FE83-20 33 FE        363 (  6)                 JSR     ECHO
FE86-68              364 (  4)                 PLA
FE87-A8              365 (  2)                 TAY
FE88-60              366 (  6)                 RTS
FE89-                367
FE89-                368       STRECHO
FE89-98              369 (  2)                 TYA
FE8A-48              370 (  3)                 PHA     ;-- Sanatize Y Register --------------------------------
FE8B-                371
FE8B-A0 00           372 (  2)                 LDY     #$0
FE8D-B1 2C           373 ( 5*) .LOOP           LDA     (STRL),Y
FE8F-F0 06           374 (2**)                 BEQ     .JMPOUT
FE91-20 33 FE        375 (  6)                 JSR     ECHO
FE94-C8              376 (  2)                 INY
FE95-D0 F6           377 (2**)                 BNE     .LOOP
FE97-                378
FE97-68              379 (  4) .JMPOUT         PLA
FE98-A8              380 (  2)                 TAY
FE99-60              381 (  6)                 RTS
FE9A-                382
FE9A-                383       BINBCD16
FE9A-F8              384 (  2)                 SED                 ; Switch to decimal mode        2
FE9B-A9 00           385 (  2)                 LDA     #0          ; Ensure the result is clear    2
FE9D-85 10           386 (  2)                 STA     BCD+0       ;                               3
FE9F-85 11           387 (  2)                 STA     BCD+1       ;                               3
FEA1-85 12           388 (  2)                 STA     BCD+2       ;                               3       13
FEA3-                389
FEA3-06 2E           390 (  5) CBIT1           ASL     MEMSZL       ; Shift out one bit             5
FEA5-26 2F           391 (  5)                 ROL     MEMSZL+1     ;                               5
FEA7-                392       ;               LDA     bcd+0        ;
FEA7-65 10           393 (  3)                 ADC     BCD+0        ; And add into result           3
FEA9-85 10           394 (  2)                 STA     BCD+0        ;                               3
FEAB-06 2E           395 (  5)                 ASL     MEMSZL       ;                               5
FEAD-26 2F           396 (  5)                 ROL     MEMSZL+1     ;                               5
FEAF-65 10           397 (  3)                 ADC     BCD+0        ;                               3
FEB1-85 10           398 (  2)                 STA     BCD+0        ;                               3
FEB3-06 2E           399 (  5)                 ASL     MEMSZL       ;                               5
FEB5-26 2F           400 (  5)                 ROL     MEMSZL+1     ;                               5
FEB7-65 10           401 (  3)                 ADC     BCD+0        ;                               3
FEB9-85 10           402 (  2)                 STA     BCD+0        ;                               3
FEBB-06 2E           403 (  5)                 ASL     MEMSZL       ;                               5
FEBD-26 2F           404 (  5)                 ROL     MEMSZL+1     ;                               5
FEBF-65 10           405 (  3)                 ADC     BCD+0        ;                               3
FEC1-85 10           406 (  2)                 STA     BCD+0        ;                               3
FEC3-06 2E           407 (  5)                 ASL     MEMSZL       ;                               5
FEC5-26 2F           408 (  5)                 ROL     MEMSZL+1     ;                               5
FEC7-65 10           409 (  3)                 ADC     BCD+0        ;                               3
FEC9-85 10           410 (  2)                 STA     BCD+0        ;                               3
FECB-06 2E           411 (  5)                 ASL     MEMSZL       ;                               5
FECD-26 2F           412 (  5)                 ROL     MEMSZL+1     ;                               5
FECF-65 10           413 (  3)                 ADC     BCD+0        ;                               3
FED1-85 10           414 (  2)                 STA     BCD+0        ;                               3       96
FED3-A2 07           415 (  2)                 LDX     #7           ;                               2       2
FED5-06 2E           416 (  5) CBIT7           ASL     MEMSZL       ; Shift out one bit             5
FED7-26 2F           417 (  5)                 ROL     MEMSZL+1     ;                               5
FED9-A5 10           418 (  3)                 LDA     BCD+0        ; And add into result           3
FEDB-65 10           419 (  3)                 ADC     BCD+0        ;                               3
FEDD-85 10           420 (  2)                 STA     BCD+0        ;                               3
FEDF-A5 11           421 (  3)                 LDA     BCD+1        ; propagating any carry         3
FEE1-65 11           422 (  3)                 ADC     BCD+1        ;                               3
FEE3-85 11           423 (  2)                 STA     BCD+1        ;                               3
FEE5-CA              424 (  2)                 DEX                  ; And repeat for next bit       2
FEE6-D0 ED           425 (2**)                 BNE     CBIT7        ;                               3       33*7-1=230
FEE8-                426
FEE8-A2 03           427 (  2)                 LDX     #3          ;                                         2       2
FEEA-06 2E           428 (  5) CBIT13          ASL     MEMSZL       ; Shift out one bit             5
FEEC-26 2F           429 (  5)                 ROL     MEMSZL+1     ;                               5
FEEE-A5 10           430 (  3)                 LDA     BCD+0        ; And add into result           3
FEF0-65 10           431 (  3)                 ADC     BCD+0        ;                               3
FEF2-85 10           432 (  2)                 STA     BCD+0        ;                               3
FEF4-A5 11           433 (  3)                 LDA     BCD+1        ; propagating any carry         3
FEF6-65 11           434 (  3)                 ADC     BCD+1        ;                               3
FEF8-85 11           435 (  2)                 STA     BCD+1        ;                               3
FEFA-A5 12           436 (  3)                 LDA     BCD+2        ; ... thru whole result         3
FEFC-65 12           437 (  3)                 ADC     BCD+2        ;                               3
FEFE-85 12           438 (  2)                 STA     BCD+2        ;                               3
FF00-CA              439 (  2)                 DEX                  ; And repeat for next bit       2
FF01-D0 E7           440 (2**)                 BNE CBIT13           ;                               3       42*3-1=125
FF03-D8              441 (  2)                 CLD                  ; Back to binary                2       2; tot 470
FF04-29 0F           442 (  2)                 AND     #$0F
FF06-09 30           443 (  2)                 ORA     #$30
FF08-85 17           444 (  2)                 STA     NUMSTR+1
FF0A-A5 11           445 (  3)                 LDA     BCD+1
FF0C-29 0F           446 (  2)                 AND     #$0F
FF0E-09 30           447 (  2)                 ORA     #$30
FF10-85 19           448 (  2)                 STA     NUMSTR+3
FF12-A5 11           449 (  3)                 LDA     BCD+1
FF14-4A              450 (  2)                 LSR
FF15-4A              451 (  2)                 LSR
FF16-4A              452 (  2)                 LSR
FF17-4A              453 (  2)                 LSR
FF18-09 30           454 (  2)                 ORA     #$30
FF1A-85 18           455 (  2)                 STA     NUMSTR+2
FF1C-A5 10           456 (  3)                 LDA     BCD+0
FF1E-29 0F           457 (  2)                 AND     #$0F
FF20-09 30           458 (  2)                 ORA     #$30
FF22-85 1B           459 (  2)                 STA     NUMSTR+5
FF24-A5 10           460 (  3)                 LDA     BCD+0
FF26-4A              461 (  2)                 LSR
FF27-4A              462 (  2)                 LSR
FF28-4A              463 (  2)                 LSR
FF29-4A              464 (  2)                 LSR
FF2A-09 30           465 (  2)                 ORA     #$30
FF2C-85 1A           466 (  2)                 STA     NUMSTR+4
FF2E-A9 14           467 (  2)                 LDA     #20
FF30-85 16           468 (  2)                 STA     NUMSTR+0
FF32-60              469 (  6)                 RTS                  ; All Done.
FF33-                470       ;-----------------------------------------------------------------------------------
FF33-20 56 49 41 
     20 44 45 56 
     4B 49 54 20 
     77 69 74 68 
     20 57 4F 5A 
     4D 4F 4E 20 
     28 63 29 20 
     53 74 65 76 
     65 20 57 6F 
     7A 6E 69 61 
     6B 20 31 39 
     37 36 0A 0D 
     28 49 29 6E 
     69 74 20 4D 
     65 6D 6F 72 
     79 20 3F 0A 
     0D 00           471       BOOTMSG         .AZ     / VIA DEVKIT with WOZMON (c) Steve Wozniak 1976/,#$0A,#$0D,/(I)nit Memory ?/,#$0A,#$0D
FF75-20 42 59 54 
     45 53 20 46 
     52 45 45 0A 
     0D 00           472       MEMMSG          .AZ     / BYTES FREE/,#$0A,#$0D
FF83-54 45 53 54 
     49 4E 47 20 
     4D 45 4D 4F 
     52 59 0A 0D 
     00              473       RTASMSG         .AZ     /TESTING MEMORY/,#$0A,#$0D
FF94-                474       ;-------------------------------------------------------------------------
FF94-                475       ;  Vector area
FF94-                476       ;-------------------------------------------------------------------------
FF94-                477       ;
FFF8                478                       .NO     $FFF8
FFF8-00 00           479                       .DA     $0000           Unused, what a pity
FFFA-00 0F           480       NMI_VEC         .DA     $0F00           NMI vector
FFFC-03 FD           481       RESET_VEC       .DA     RESET           RESET vector
FFFE-03 FD           482       IRQ_VEC         .DA     RESET           IRQ vector
